import os
import json
import boto3
import pysftp
from botocore.exceptions import ClientError

# AWS clients
s3_client = boto3.client('s3')
secrets_client = boto3.client('secretsmanager')

# Load environment variables
S3_BUCKET = os.getenv('S3_BUCKET')
SFTP_SERVER = os.getenv('SFTP_SERVER')
SECRETS_NAME = os.getenv('SECRETS_NAME')

def get_sftp_credentials():
    """
    Fetch SFTP credentials from AWS Secrets Manager.
    Assumes the secret contains JSON with keys: 'username' and 'private_key'.
    """
    try:
        secret_value = secrets_client.get_secret_value(SecretId=SECRETS_NAME)
        secret = json.loads(secret_value['SecretString'])
        return secret['username'], secret['private_key']
    except ClientError as e:
        print(f"Error fetching secrets: {e}")
        raise e

def upload_to_sftp(sftp, s3_key, sftp_path):
    """
    Uploads a file from S3 to the SFTP server.
    """
    try:
        # Download the file from S3 to Lambda /tmp directory
        local_path = f"/tmp/{os.path.basename(s3_key)}"
        s3_client.download_file(S3_BUCKET, s3_key, local_path)
        
        # Upload to SFTP
        sftp.put(local_path, sftp_path)
        print(f"File {s3_key} uploaded to SFTP path {sftp_path}")
    except Exception as e:
        print(f"Error uploading to SFTP: {e}")
        raise e

def download_from_sftp(sftp, sftp_path, s3_key):
    """
    Downloads a file from the SFTP server to S3.
    """
    try:
        # Download file from SFTP to Lambda /tmp directory
        local_path = f"/tmp/{os.path.basename(sftp_path)}"
        sftp.get(sftp_path, local_path)
        
        # Upload the file to S3
        s3_client.upload_file(local_path, S3_BUCKET, s3_key)
        print(f"File {sftp_path} downloaded from SFTP to S3 key {s3_key}")
    except Exception as e:
        print(f"Error downloading from SFTP: {e}")
        raise e

def lambda_handler(event, context):
    """
    Lambda handler function to transfer files between S3 and SFTP server based on event.
    Event must include 'direction' and relevant 'path' information.
    """
    # Parse event for transfer direction and path details
    direction = event.get("direction")
    s3_key = event.get("s3_key")
    sftp_path = event.get("sftp_path")
    
    if not direction or not s3_key or not sftp_path:
        raise ValueError("Event must include 'direction', 's3_key', and 'sftp_path'.")

    # Fetch SFTP credentials
    username, private_key = get_sftp_credentials()

    # Connect to the SFTP server using private key
    cnopts = pysftp.CnOpts()
    cnopts.hostkeys = None  # Disable host key checking for simplicity; consider adding host key for security
    with pysftp.Connection(SFTP_SERVER, username=username, private_key=private_key, cnopts=cnopts) as sftp:
        if direction == "s3_to_sftp":
            # Transfer file from S3 to SFTP
            upload_to_sftp(sftp, s3_key, sftp_path)
        elif direction == "sftp_to_s3":
            # Transfer file from SFTP to S3
            download_from_sftp(sftp, sftp_path, s3_key)
        else:
            raise ValueError("Invalid direction; must be 's3_to_sftp' or 'sftp_to_s3'.")

    return {"status": "success", "direction": direction, "s3_key": s3_key, "sftp_path": sftp_path}
